'use strict';

var getErrorShape = require('../unstable-core-do-not-import/error/getErrorShape.js');
var TRPCError = require('../unstable-core-do-not-import/error/TRPCError.js');
require('../unstable-core-do-not-import/rootConfig.js');
var nodeHTTPRequestHandler = require('./node-http/nodeHTTPRequestHandler.js');

/**
 * If you're making an adapter for tRPC and looking at this file for reference, you should import types and functions from `@trpc/server` and `@trpc/server/http`
 *
 * @example
 * ```ts
 * import type { AnyTRPCRouter } from '@trpc/server'
 * import type { HTTPBaseHandlerOptions } from '@trpc/server/http'
 * ```
 */ // @trpc/server
function createNextApiHandler(opts) {
    return async (req, res)=>{
        function getPath() {
            if (typeof req.query['trpc'] === 'string') {
                return req.query['trpc'];
            }
            if (Array.isArray(req.query['trpc'])) {
                return req.query['trpc'].join('/');
            }
            return null;
        }
        const path = getPath();
        if (path === null) {
            const error = getErrorShape.getErrorShape({
                config: opts.router._def._config,
                error: new TRPCError.TRPCError({
                    message: 'Query "trpc" not found - is the file named `[trpc]`.ts or `[...trpc].ts`?',
                    code: 'INTERNAL_SERVER_ERROR'
                }),
                type: 'unknown',
                ctx: undefined,
                path: undefined,
                input: undefined
            });
            res.statusCode = 500;
            res.json({
                id: -1,
                error
            });
            return;
        }
        await nodeHTTPRequestHandler.nodeHTTPRequestHandler({
            ...opts,
            req,
            res,
            path
        });
    };
}

exports.createNextApiHandler = createNextApiHandler;
