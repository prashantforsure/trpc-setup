'use strict';

var TRPCError = require('../../unstable-core-do-not-import/error/TRPCError.js');
require('../../unstable-core-do-not-import/rootConfig.js');

/**
 * Convert an incoming message to a body stream with a max size
 */ function incomingMessageToBodyStream(req, opts) {
    let size = 0;
    const maxBodySize = opts.maxBodySize;
    let hasClosed = false;
    const stream = new ReadableStream({
        start (controller) {
            req.on('data', (chunk)=>{
                size += chunk.length;
                if (maxBodySize != null && size > maxBodySize) {
                    controller.error(new TRPCError.TRPCError({
                        code: 'PAYLOAD_TOO_LARGE'
                    }));
                    // an error is thrown if we try to close the controller after
                    // erroring, so track the closure
                    hasClosed = true;
                    return;
                }
                controller.enqueue(chunk);
            });
            req.once('end', ()=>{
                if (hasClosed) {
                    return;
                }
                hasClosed = true;
                controller.close();
            });
        },
        cancel () {
            req.destroy();
        }
    });
    return stream;
}
const bodyMethods = [
    'POST',
    'PUT',
    'PATCH'
];
/**
 * Convert an [`IncomingMessage`](https://nodejs.org/api/http.html#class-httpincomingmessage) to a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)
 */ function incomingMessageToRequest(req, opts) {
    const ac = new AbortController();
    const headers = new Headers(req.headers);
    const url = `http://${headers.get('host')}${req.url}`;
    req.once('aborted', ()=>{
        ac.abort();
    });
    const init = {
        headers,
        method: req.method,
        signal: ac.signal,
        // @ts-expect-error this is fine
        duplex: 'half'
    };
    if (req.method && bodyMethods.includes(req.method)) {
        if (!('body' in req)) {
            init.body = incomingMessageToBodyStream(req, opts);
        } else if (typeof req.body === 'string') {
            init.body = req.body;
        } else if (req.body !== undefined) {
            init.body = JSON.stringify(req.body);
        }
    }
    const request = new Request(url, init);
    return request;
}

exports.incomingMessageToRequest = incomingMessageToRequest;
