'use strict';

var getErrorShape = require('../unstable-core-do-not-import/error/getErrorShape.js');
var TRPCError = require('../unstable-core-do-not-import/error/TRPCError.js');
var utils = require('../unstable-core-do-not-import/utils.js');
var parseConnectionParams = require('../unstable-core-do-not-import/http/parseConnectionParams.js');
var parseTRPCMessage = require('../unstable-core-do-not-import/rpc/parseTRPCMessage.js');
var observable = require('../observable/observable.js');
var tracked = require('../unstable-core-do-not-import/stream/tracked.js');
var transformer = require('../unstable-core-do-not-import/transformer.js');
var toURL = require('../unstable-core-do-not-import/http/toURL.js');
require('../unstable-core-do-not-import/rootConfig.js');
var router = require('../unstable-core-do-not-import/router.js');

/**
 * Importing ws causes a build error
 * @link https://github.com/trpc/trpc/pull/5279
 */ const WEBSOCKET_OPEN = 1; /* ws.WebSocket.OPEN */ 
const unsetContextPromiseSymbol = Symbol('unsetContextPromise');
function getWSConnectionHandler(opts) {
    const { createContext , router: router$1  } = opts;
    const { transformer: transformer$1  } = router$1._def._config;
    return async (client, req)=>{
        const clientSubscriptions = new Map();
        const abortController = new AbortController();
        function respond(untransformedJSON) {
            client.send(JSON.stringify(transformer.transformTRPCResponse(router$1._def._config, untransformedJSON)));
        }
        function createCtxPromise(getConnectionParams) {
            return utils.run(async ()=>{
                ctx = await createContext?.({
                    req,
                    res: client,
                    info: {
                        connectionParams: getConnectionParams(),
                        calls: [],
                        isBatchCall: false,
                        accept: null,
                        type: 'unknown',
                        signal: abortController.signal
                    }
                });
                return ctx;
            }).catch((cause)=>{
                const error = TRPCError.getTRPCErrorFromUnknown(cause);
                opts.onError?.({
                    error,
                    path: undefined,
                    type: 'unknown',
                    ctx,
                    req,
                    input: undefined
                });
                respond({
                    id: null,
                    error: getErrorShape.getErrorShape({
                        config: router$1._def._config,
                        error,
                        type: 'unknown',
                        path: undefined,
                        input: undefined,
                        ctx
                    })
                });
                // close in next tick
                (globalThis.setImmediate ?? globalThis.setTimeout)(()=>{
                    client.close();
                });
                throw error;
            });
        }
        let ctx = undefined;
        /**
     * promise for initializing the context
     *
     * - the context promise will be created immediately on connection if no connectionParams are expected
     * - if connection params are expected, they will be created once received
     */ let ctxPromise = toURL.toURL(req.url ?? '').searchParams.get('connectionParams') === '1' ? unsetContextPromiseSymbol : createCtxPromise(()=>null);
        async function handleRequest(msg) {
            const { id , jsonrpc  } = msg;
            /* istanbul ignore next -- @preserve */ if (id === null) {
                throw new TRPCError.TRPCError({
                    code: 'BAD_REQUEST',
                    message: '`id` is required'
                });
            }
            if (msg.method === 'subscription.stop') {
                clientSubscriptions.get(id)?.abort();
                return;
            }
            const { path , lastEventId  } = msg.params;
            let { input  } = msg.params;
            const type = msg.method;
            try {
                if (lastEventId !== undefined) {
                    if (utils.isObject(input)) {
                        input = {
                            ...input,
                            lastEventId: lastEventId
                        };
                    } else {
                        input ?? (input = {
                            lastEventId: lastEventId
                        });
                    }
                }
                await ctxPromise; // asserts context has been set
                const result = await router.callProcedure({
                    procedures: router$1._def.procedures,
                    path,
                    getRawInput: async ()=>input,
                    ctx,
                    type
                });
                const isIterableResult = utils.isAsyncIterable(result) || observable.isObservable(result);
                if (type !== 'subscription') {
                    if (isIterableResult) {
                        throw new TRPCError.TRPCError({
                            code: 'UNSUPPORTED_MEDIA_TYPE',
                            message: `Cannot return an async iterable or observable from a ${type} procedure with WebSockets`
                        });
                    }
                    // send the value as data if the method is not a subscription
                    respond({
                        id,
                        jsonrpc,
                        result: {
                            type: 'data',
                            data: result
                        }
                    });
                    return;
                }
                if (!isIterableResult) {
                    throw new TRPCError.TRPCError({
                        message: `Subscription ${path} did not return an observable or a AsyncGenerator`,
                        code: 'INTERNAL_SERVER_ERROR'
                    });
                }
                /* istanbul ignore next -- @preserve */ if (client.readyState !== WEBSOCKET_OPEN) {
                    // if the client got disconnected whilst initializing the subscription
                    // no need to send stopped message if the client is disconnected
                    return;
                }
                /* istanbul ignore next -- @preserve */ if (clientSubscriptions.has(id)) {
                    // duplicate request ids for client
                    throw new TRPCError.TRPCError({
                        message: `Duplicate id ${id}`,
                        code: 'BAD_REQUEST'
                    });
                }
                const iterable = observable.isObservable(result) ? observable.observableToAsyncIterable(result) : result;
                const iterator = iterable[Symbol.asyncIterator]();
                const abortController = new AbortController();
                const abortPromise = new Promise((resolve)=>{
                    abortController.signal.onabort = ()=>resolve('abort');
                });
                utils.run(async ()=>{
                    while(true){
                        const next = await Promise.race([
                            iterator.next().catch(TRPCError.getTRPCErrorFromUnknown),
                            abortPromise
                        ]);
                        if (next === 'abort') {
                            await iterator.return?.();
                            break;
                        }
                        if (next instanceof Error) {
                            const error = TRPCError.getTRPCErrorFromUnknown(next);
                            opts.onError?.({
                                error,
                                path,
                                type,
                                ctx,
                                req,
                                input
                            });
                            respond({
                                id,
                                jsonrpc,
                                error: getErrorShape.getErrorShape({
                                    config: router$1._def._config,
                                    error,
                                    type,
                                    path,
                                    input,
                                    ctx
                                })
                            });
                            break;
                        }
                        if (next.done) {
                            break;
                        }
                        const result = {
                            type: 'data',
                            data: next.value
                        };
                        if (tracked.isTrackedEnvelope(next.value)) {
                            const [id1, data] = next.value;
                            result.id = id1;
                            result.data = {
                                id: id1,
                                data
                            };
                        }
                        respond({
                            id,
                            jsonrpc,
                            result
                        });
                    }
                    await iterator.return?.();
                    respond({
                        id,
                        jsonrpc,
                        result: {
                            type: 'stopped'
                        }
                    });
                    clientSubscriptions.delete(id);
                }).catch((cause)=>{
                    const error = TRPCError.getTRPCErrorFromUnknown(cause);
                    opts.onError?.({
                        error,
                        path,
                        type,
                        ctx,
                        req,
                        input
                    });
                    respond({
                        id,
                        jsonrpc,
                        error: getErrorShape.getErrorShape({
                            config: router$1._def._config,
                            error,
                            type,
                            path,
                            input,
                            ctx
                        })
                    });
                    abortController.abort();
                });
                clientSubscriptions.set(id, abortController);
                respond({
                    id,
                    jsonrpc,
                    result: {
                        type: 'started'
                    }
                });
            } catch (cause) /* istanbul ignore next -- @preserve */ {
                // procedure threw an error
                const error = TRPCError.getTRPCErrorFromUnknown(cause);
                opts.onError?.({
                    error,
                    path,
                    type,
                    ctx,
                    req,
                    input
                });
                respond({
                    id,
                    jsonrpc,
                    error: getErrorShape.getErrorShape({
                        config: router$1._def._config,
                        error,
                        type,
                        path,
                        input,
                        ctx
                    })
                });
            }
        }
        client.on('message', async (message)=>{
            if (ctxPromise === unsetContextPromiseSymbol) {
                // If the ctxPromise wasn't created immediately, we're expecting the first message to be a TRPCConnectionParamsMessage
                ctxPromise = createCtxPromise(()=>{
                    let msg;
                    try {
                        msg = JSON.parse(message.toString());
                        if (!utils.isObject(msg)) {
                            throw new Error('Message was not an object');
                        }
                    } catch (cause) {
                        throw new TRPCError.TRPCError({
                            code: 'PARSE_ERROR',
                            message: `Malformed TRPCConnectionParamsMessage`,
                            cause
                        });
                    }
                    const connectionParams = parseConnectionParams.parseConnectionParamsFromUnknown(msg.data);
                    return connectionParams;
                });
                return;
            }
            try {
                const msgJSON = JSON.parse(message.toString());
                const msgs = Array.isArray(msgJSON) ? msgJSON : [
                    msgJSON
                ];
                const promises = msgs.map((raw)=>parseTRPCMessage.parseTRPCMessage(raw, transformer$1)).map(handleRequest);
                await Promise.all(promises);
            } catch (cause) {
                const error = new TRPCError.TRPCError({
                    code: 'PARSE_ERROR',
                    cause
                });
                respond({
                    id: null,
                    error: getErrorShape.getErrorShape({
                        config: router$1._def._config,
                        error,
                        type: 'unknown',
                        path: undefined,
                        input: undefined,
                        ctx: undefined
                    })
                });
            }
        });
        // WebSocket errors should be handled, as otherwise unhandled exceptions will crash Node.js.
        // This line was introduced after the following error brought down production systems:
        // "RangeError: Invalid WebSocket frame: RSV2 and RSV3 must be clear"
        // Here is the relevant discussion: https://github.com/websockets/ws/issues/1354#issuecomment-774616962
        client.on('error', (cause)=>{
            opts.onError?.({
                ctx,
                error: TRPCError.getTRPCErrorFromUnknown(cause),
                input: undefined,
                path: undefined,
                type: 'unknown',
                req
            });
        });
        client.once('close', ()=>{
            for (const sub of clientSubscriptions.values()){
                sub.abort();
            }
            clientSubscriptions.clear();
            abortController.abort();
        });
        if (ctxPromise !== unsetContextPromiseSymbol) {
            // prevent unhandled promise rejection errors
            await ctxPromise.catch(()=>null);
        }
    };
}
/**
 * Handle WebSocket keep-alive messages
 */ function handleKeepAlive(client, pingMs = 30000, pongWaitMs = 5000) {
    let heartbeatTimeout;
    const heartbeatInterval = setInterval(()=>{
        if (client.readyState !== WEBSOCKET_OPEN) {
            return;
        }
        // First we send a ping message and wait for a pong
        client.ping();
        // We set a timeout to close the connection if the pong is not received
        heartbeatTimeout = setTimeout(()=>{
            client.terminate();
            clearInterval(heartbeatInterval);
        }, pongWaitMs);
    }, pingMs).unref();
    // When we receive a pong message, we clear the timeout
    client.on('pong', ()=>{
        heartbeatTimeout && clearTimeout(heartbeatTimeout);
    });
    // If the connection is closed, we clear the interval
    client.on('close', ()=>{
        clearInterval(heartbeatInterval);
    });
}
function applyWSSHandler(opts) {
    const { wss , prefix , keepAlive  } = opts;
    const onConnection = getWSConnectionHandler(opts);
    wss.on('connection', async (client, req)=>{
        if (prefix && !req.url?.startsWith(prefix)) {
            return;
        }
        await onConnection(client, req);
        if (keepAlive?.enabled) {
            const { pingMs , pongWaitMs  } = keepAlive;
            handleKeepAlive(client, pingMs, pongWaitMs);
        }
    });
    return {
        broadcastReconnectNotification: ()=>{
            const response = {
                id: null,
                method: 'reconnect'
            };
            const data = JSON.stringify(response);
            for (const client of wss.clients){
                if (client.readyState === WEBSOCKET_OPEN) {
                    client.send(data);
                }
            }
        }
    };
}

exports.applyWSSHandler = applyWSSHandler;
exports.getWSConnectionHandler = getWSConnectionHandler;
exports.handleKeepAlive = handleKeepAlive;
