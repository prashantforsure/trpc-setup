import type { Observer, UnsubscribeFn } from '@trpc/server/observable';
import type { AnyRouter, inferClientTypes, inferRouterError, TRPCResponseMessage } from '@trpc/server/unstable-core-do-not-import';
import { TRPCClientError } from '../TRPCClientError';
import type { TransformerOptions } from '../unstable-internals';
import { type UrlOptionsWithConnectionParams } from './internals/urlWithConnectionParams';
import type { Operation, TRPCLink } from './types';
type WSCallbackResult<TRouter extends AnyRouter, TOutput> = TRPCResponseMessage<TOutput, inferRouterError<TRouter>>;
type WSCallbackObserver<TRouter extends AnyRouter, TOutput> = Observer<WSCallbackResult<TRouter, TOutput>, TRPCClientError<TRouter>>;
declare const exponentialBackoff: (attemptIndex: number) => number;
export interface WebSocketClientOptions extends UrlOptionsWithConnectionParams {
    /**
     * Ponyfill which WebSocket implementation to use
     */
    WebSocket?: typeof WebSocket;
    /**
     * The number of milliseconds before a reconnect is attempted.
     * @default {@link exponentialBackoff}
     */
    retryDelayMs?: typeof exponentialBackoff;
    /**
     * Triggered when a WebSocket connection is established
     */
    onOpen?: () => void;
    /**
     * Triggered when a WebSocket connection is closed
     */
    onClose?: (cause?: {
        code?: number;
    }) => void;
    /**
     * Lazy mode will close the WebSocket automatically after a period of inactivity (no messages sent or received and no pending requests)
     */
    lazy?: {
        /**
         * Enable lazy mode
         * @default false
         */
        enabled: boolean;
        /**
         * Close the WebSocket after this many milliseconds
         * @default 0
         */
        closeMs: number;
    };
}
export declare function createWSClient(opts: WebSocketClientOptions): {
    close: () => void;
    request: (opts: {
        op: Operation;
        callbacks: WSCallbackObserver<AnyRouter, unknown>;
        lastEventId: string | undefined;
    }) => UnsubscribeFn;
    readonly connection: ({
        id: number;
    } & ({
        state: "open";
        ws: WebSocket;
    } | {
        state: "closed";
        ws: WebSocket;
    } | {
        state: "connecting";
        ws?: WebSocket;
    })) | null;
    /**
     * Reconnect to the WebSocket server
     */
    reconnect: () => void;
};
export type TRPCWebSocketClient = ReturnType<typeof createWSClient>;
export type WebSocketLinkOptions<TRouter extends AnyRouter> = {
    client: TRPCWebSocketClient;
} & TransformerOptions<inferClientTypes<TRouter>>;
/**
 * @link https://trpc.io/docs/v11/client/links/wsLink
 */
export declare function wsLink<TRouter extends AnyRouter>(opts: WebSocketLinkOptions<TRouter>): TRPCLink<TRouter>;
export {};
//# sourceMappingURL=wsLink.d.ts.map